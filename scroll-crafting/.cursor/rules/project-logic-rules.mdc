---
description: 
globs: scroll-crafting/**
alwaysApply: false
---
# Project Logic Rule

This rule defines the role, boundaries, and expectations for domain-specific logic within each generator project in the Lorerim Codex system.

## Purpose

The `logic/` directory exists to house project-specific interpretation of Skyrim records. It connects structural data (from `records/` and `primaries/`) into meaningful, contextual information specific to the document being generated.

## Responsibilities

* Enrich or interpret data using domain knowledge
* Define custom transformations, groupings, filters, or inferences
* Consume schema linker utilities as needed
* Provide clean, typed outputs to be passed into Markdown and JSON templates

## Separation from Schema Linkers

**Schema linkers** handle general, reusable record wiring (e.g., `SPEL` → `MGEF`).
**Project logic** understands the *meaning* of those links within the current content domain.

### ✅ Example:

* Schema linker: Knows that `SPEL.effects[]` contains MGEF FormIDs
* Project logic (e.g. in `religion/`): Knows that `QUST.VMAD.Properties.AltarBlessings` → `SPEL` → `MGEF.DNAM` contains the blessing description text

## Folder Structure

Each project may include:

```
projects/<name>/
├── logic/
│   └── <resolver>.ts
├── __tests__/
│   └── <resolver>.test.ts
```

## Guidelines

* Each module in `logic/` should have a single purpose (e.g., `resolveBlessings.ts`)
* Do not place generic linking logic here — use schema linkers
* Do not duplicate logic across projects
* All logic modules must be testable and included in the test suite

## Cursor Agent Notes

* Always isolate contextual logic into the `logic/` folder
* Do not place this logic in `generate.ts`
* Use schema linkers and `utils/` functions to resolve base record relationships first
* Add new logic only if it directly interprets the meaning of a data pattern in this project

*This rule is always in effect alongside Code Quality, Generator Structure, and Testing rules.*

