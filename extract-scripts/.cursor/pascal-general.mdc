---
description: 
globs: *.pas
alwaysApply: false
---
**Pascal Scripting Primer for xEdit (TES5Edit / SSEEdit)**

This guide outlines the core rules and best practices for writing Pascal scripts compatible with xEdit. It is focused on ensuring that all scripts work properly within the xEdit scripting environment.

---

### DO NOT USE DELPHI
Scripts should be written in **Pascal Script** for xEdit, which has different constraints than Delphi.
- Avoid using Delphi-specific constructs or assumptions. Stick to the subset supported by xEdit.

---

### REQUIRED STRUCTURE
All scripts **must** define a unit named `UserScript`:
```pascal
unit UserScript;
```

All scripts must **end with**:
```pascal
end.
```
These are required for the script to compile and run in xEdit.

---

### BASIC FUNCTION STUBS
At minimum, a script should include:
```pascal
function Initialize: integer;
begin
  Result := 0;
end;

function Process(e: IInterface): integer;
begin
  Result := 0;
end;

function Finalize: integer;
begin
  Result := 0;
end;
```
- `Initialize`: Runs once when the script starts.
- `Process`: Runs on each selected record.
- `Finalize`: Runs once after all records are processed.

---

### FILE SYSTEM PATHS
- Use `ProgramPath + 'Edit Scripts\\subfolder\'` for writing output.
- Use `ForceDirectories(path)` to ensure the directory exists.

---

### STRING OPERATIONS
- Use `StringReplace` to escape quotes:
```pascal
function EscapeString(const s: string): string;
begin
  Result := StringReplace(s, '"', '\"', [rfReplaceAll]);
end;
```
- Avoid `BoolToStr`, `AppendToFile`, or any functions not defined explicitly or known to be supported by xEdit.

---

### STRINGLIST MANAGEMENT
- Use `TStringList.Create` and always call `Free` in `Finalize`.
- Never treat string lists like dictionaries unless explicitly managing key-value pairs with `Values[]`.

---

### RECORD MANAGEMENT
- Use `Signature(e)` to get the record type.
- Use `ElementBySignature(e, 'EDID')` to find the Editor ID.
- Use `FixedFormID(e)` and `GetLoadOrderFormID(e)` for reliable form identification.

---

### DEBUGGING TIPS
- Use `AddMessage('text')` for logging/debugging.
- Run small batches of records while testing to isolate issues.

---

### HELPFUL UTILITIES
- `ElementCount(e)`, `ElementByIndex(e, i)`, and `Name(e)` are the foundation for recursive dumps.
- Always protect against empty or unnamed fields using fallbacks like `IntToStr(i)` as array keys.

---

By adhering to these rules, you can reduce script errors and improve reliability when creating JSON dumps, reference explorers, or metadata pipelines for modded Skyrim content.

