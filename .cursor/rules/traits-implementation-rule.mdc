---
description: 
globs: 
alwaysApply: false
---
# Traits Implementation Rule

This rule serves as the authoritative guide for implementing the traits generator project in the Lorerim Codex system.

## Data Structure

### Core Data Model

```typescript
interface EnhancedTrait {
  name: string;          // From SPEL.FULL
  description: string;   // From SPEL.DESC
  edid: string;         // From SPEL.EDID
  formId: string;       // SPEL FormID
  effects: StructuredEffect[];
  category: TraitCategory;
  tags: TraitCategory[];
  diagram?: string;     // Mermaid diagram of effect relationships
  spell?: {
    cost: number;       // From SPEL.SPIT.spellCost
    type: string;       // From SPEL.SPIT.type
    castType: string;   // From SPEL.SPIT.castType
    delivery: string;   // From SPEL.SPIT.delivery
  };
  anchorRecord?: SpelRecordFromSchema;
}

interface StructuredEffect {
  type: EffectType;     // Mapped from MGEF.DATA.effectType
  value: number;        // From SPEL.effects[].EFIT.magnitude
  duration?: number;    // From SPEL.effects[].EFIT.duration
  condition?: string;   // Extracted from MGEF.DNAM
  flags: string[];      // From MGEF.DATA.flags
}
```

### Record Resolution Chain

```mermaid
graph TD
  SPEL["SPEL Record<br/>(Trait Spell)"]
  MGEF["MGEF Record<br/>(Magic Effect)"]
  PERK["PERK Record<br/>(Related Perk)"]
  
  SPEL -->|"effects[].EFID"| MGEF
  MGEF -->|"DATA.perkID"| PERK
```

### Field Mapping

1. Trait Base Information:
   - `name`: SPEL.FULL or SPEL.EDID
   - `description`: SPEL.DESC (with bracketed values formatted)
   - `edid`: SPEL.EDID
   - `formId`: SPEL.meta.globalFormId

2. Spell Information:
   - `spell.cost`: SPEL.SPIT.spellCost
   - `spell.type`: SPEL.SPIT.type
   - `spell.castType`: SPEL.SPIT.castType
   - `spell.delivery`: SPEL.SPIT.delivery

3. Effect Information:
   - `effects[].type`: Mapped from MGEF.DATA.effectType
   - `effects[].value`: SPEL.effects[].EFIT.magnitude
   - `effects[].duration`: SPEL.effects[].EFIT.duration
   - `effects[].condition`: Extracted from MGEF.DNAM
   - `effects[].flags`: MGEF.DATA.flags

4. Categories and Tags:
   - Determined by analyzing:
     - SPEL.DESC content
     - MGEF.DNAM content
     - MGEF.DATA.skill
     - MGEF.DATA.effectType

### Effect Types

1. Spell and Magic:
   - `SPELL_POWER`: Spell effectiveness/magnitude
   - `SPELL_COST`: Spell casting cost
   - `SPELL_DURATION`: Spell duration
   - `MAGIC_REGEN`: Magicka regeneration

2. Combat:
   - `DAMAGE_DEALT`: Outgoing damage
   - `DAMAGE_TAKEN`: Incoming damage
   - `PHYSICAL_DAMAGE`: Physical damage
   - `STAGGER_CHANCE`: Stagger probability

3. Resources:
   - `HEALTH_REGEN`: Health regeneration
   - `STAMINA_REGEN`: Stamina regeneration

4. Movement:
   - `MOVE_SPEED`: Movement speed
   - `CARRY_WEIGHT`: Carry capacity

5. Social:
   - `FOLLOWER_COST`: Follower recruitment cost
   - `MERCHANT_PRICES`: Buy/sell prices

6. Crafting:
   - `CRAFTING_SPEED`: Crafting speed
   - `CRAFTING_QUALITY`: Item quality

7. Special:
   - `SPECIAL`: Unique/script effects

### Categories

1. `COMBAT`: Combat-focused traits
2. `MAGIC`: Magic-focused traits
3. `SOCIAL`: Social interaction traits
4. `CRAFTING`: Crafting-related traits
5. `MOVEMENT`: Movement-related traits
6. `SPECIAL`: Special/unique traits

## Implementation Phases

### 1. Record Loading (`loadTraitRecords.ts`)
- Load SPEL, MGEF, and PERK records
- Filter and deduplicate records
- Create initial record set

### 2. Effect Enhancement (`enhanceEffects.ts`)
- Map MGEF effect types to structured types
- Extract conditions from descriptions
- Determine effect scopes and categories
- Format values and descriptions

### 3. Trait Resolution (`resolveTraits.ts`)
- Resolve trait base information
- Enhance effects with MGEF data
- Determine trait categories
- Generate effect diagrams
- Link related perks

### 4. Documentation Generation
- Generate Markdown documentation
- Create effect relationship diagrams
- Format descriptions with proper markup

## Testing Requirements

1. Unit Tests:
   - Record loading
   - Effect enhancement
   - Trait resolution
   - Category determination

2. Integration Tests:
   - Full pipeline execution
   - Documentation generation
   - Record relationships

3. Test Data:
   - Sample records for each type
   - Edge cases and special effects
   - Various category combinations

## Output Format

1. JSON Output:
   - Enhanced trait definitions
   - Effect relationships
   - Category mappings

2. Markdown Output:
   - Trait descriptions
   - Effect diagrams
   - Category organization
   - Related perk links

## Dependencies

1. Record Schemas:
   - `spelSchema.ts`
   - `mgefSchema.ts`
   - `perkSchema.ts`

2. Utilities:
   - `mermaid.ts` for diagrams
   - `renderMarkdownTemplate.ts`
   - `findByFormId.ts`
   - `loadRecordSet.ts`

## Inherited Rules

This implementation must follow all inherited rules:
- Code Quality Rule
- Generator Structure Rule
- Template Construction Rule
- Output Format Rule
- Data Mapping & Resolution Rule
- Testing Rule
- Project Logic Rule
- Schema Linker Rule

## Project Structure Requirements

```
scroll-crafting/projects/traits/
├── records/           # Trait-specific records
├── templates/         # Markdown templates
│   ├── primary.md    # Main document layout
│   └── trait_block.md # Individual trait template
├── logic/            # Trait-specific logic
├── __tests__/        # Unit tests
├── output/           # Generated files (auto-created)
├── generate.ts       # Main generator script
└── rules.md         # Project-specific rules
```

## Implementation Phases

### 1. Project Setup
- Initialize directory structure as shown above
- Create `rules.md` inheriting from:
  - code_quality
  - generator_structure
  - project_logic
  - data_mapping
  - schema_linker
  - template_construction
  - output_format
  - testing

### 2. Template Development
- Create `primary.md`:
  - Define document structure
  - Set up section hierarchy
  - Plan trait grouping layout
- Create `trait_block.md`:
  - Use semantic variable names
  - Avoid exposing plugin internals
  - Follow Handlebars syntax
  - Focus on conceptual presentation

### 3. Logic Implementation
- Create core modules in `logic/`:
  - `loadTraitRecords.ts`: Load and validate trait records
  - `resolveTraits.ts`: Resolve trait relationships and effects
  - `enhanceEffects.ts`: Enhance effects with metadata
- Implement with TDD approach
- Create corresponding test files
- Document relationships in `traits-logic.md`

### 4. Generator Script
- Follow Generator Structure Rule for `generate.ts`
- Implement record loading with fallbacks
- Set up proper error handling
- Configure template registration
- Define output paths

### 5. Testing Requirements
- Create test fixtures
- Write unit tests for all logic
- Test edge cases
- Verify template rendering
- Test record resolution

### 6. Output Specifications

#### JSON Output
```typescript
interface TraitOutput {
  traits: EnhancedTrait[];
  categories?: {
    [key: string]: EnhancedTrait[];
  };
  metadata: {
    generatedAt: string;
    version: string;
  };
}
```

#### Markdown Structure
```markdown
# Traits
## Overview
## Categories
### [Category Name]
#### [Trait Name]
- Description
- Effects
  - Effect 1 description with value and duration
  - Effect 2 description with conditions
- Related Perks (if any)
- Requirements (if any)
```

## Quality Standards

### Code Quality
- Follow TypeScript best practices
- Use proper typing
- Document functions
- Handle errors gracefully

### Testing Coverage
- All logic must have tests
- Test both success and failure cases
- Include integration tests
- Verify output formats

### Documentation
- Update `traits-logic.md`
- Document record relationships
- Include usage examples
- Document any special cases

## Cursor Agent Notes

- Follow TDD approach for all implementations
- Use existing utilities from `utils/`
- Respect project boundaries
- Update this rule if new patterns emerge
- Reference UESP documentation for record structures

*This rule is always in effect alongside other inherited rules.*












